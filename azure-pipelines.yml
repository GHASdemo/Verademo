# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
# This is an example of using VeraDemo Java test application with the Veracode Static Pipeline scanner.  A Veracode subscription is required.
trigger:
- main
pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and unit tests
  jobs: 
  - job: Build
    condition: "false"
    steps:
    - task: Maven@3
      displayName: Build with Maven
      inputs:
        mavenPomFile: 'app/pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'
    # - publish: /home/vsts/work/1/s/app/target/verademo.war
    - publish: $(System.DefaultWorkingDirectory)/app/target/verademo.war
      displayName: 'Publish app for testing'
      artifact: verademo.war

- stage: Test
  displayName: AppSec testing
  dependsOn: Build
  jobs: 
  - job: SCA
    condition: "false"
    steps:
    - task: Bash@3
      displayName: 'Veracode SCA'
      inputs:
        targetType: 'inline'
        script: |
          curl -sSL https://download.sourceclear.com/ci.sh | bash -s -- scan ./app --update-advisor
          # curl -sSL https://download.sourceclear.com/ci.sh | bash -s -- scan ./app --json ./scaResults.json --update-advisor
      # env:
      #   SRCCLR_API_TOKEN: $(SRCCLR_API_TOKEN)
    # - publish: scaResults.json
    #   artifact: Results

  - job: SAST
    condition: "false"
    steps: 
    # - download: current
    #   artifact: verademo.war
    - task: Maven@3
      displayName: Build with Maven
      inputs:
        mavenPomFile: 'app/pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'
    - task: Bash@3
      displayName: Veracode SAST Pipeline Scan
      inputs:
        targetType: 'inline'
        script: |
          curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip -o pipeline-scan-LATEST.zip
          java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f ./app/target/verademo.war || true
    - publish: $(System.DefaultWorkingDirectory)/results.json
      artifact: VeracodeSASTpipeline

- stage: Container
  # condition: "false"
  displayName: Containerize and test
  jobs:
  - job: Build_and_test_image
    steps:
    - task: Bash@3
      displayName: Build a container image
      inputs:
        targetType: 'inline'
        script: |
          docker pull mariadb:10.6.2
          docker build --no-cache -t verademo .
          docker save verademo:latest -o $(System.DefaultWorkingDirectory)/verademo.tar
    - publish: $(System.DefaultWorkingDirectory)/verademo.tar
      artifact: Container
    - task: Bash@3
      displayName: Test image
      inputs:
        targetType: 'inline'
        script: |
          ls -lh
          curl -fsS https://tools.veracode.com/veracode-cli/install | sh
          export VERACODE_API_KEY_ID=$(VERACODE_API_ID)
          export VERACODE_API_KEY_SECRET=$(VERACODE_API_KEY)
          # ./veracode scan --type image --source veracode scan --type image \
          #   --source juliantotzek/verademo:latest --output verademo.json
          ./veracode scan --type archive --source verademo.tar --output verademo.json
          ./veracode sbom --type archive --source verademo.tar --output verademo_sbom.json
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'verademo.json'
        ArtifactName: 'ContainerScanResults'
        publishLocation: 'Container'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'verademo_sbom.json'
        ArtifactName: 'VerademoSBOM'
        publishLocation: 'Container'
    


  - job: Test_image
    # dependsOn: Build_image
    condition: "false"
    steps:
      - task: Bash@3
        displayName: 'Container image scan'
        inputs:
          targetType: 'inline'
          script: |
            ls -lh
            curl -fsS https://tools.veracode.com/veracode-cli/install | sh
            export VERACODE_API_KEY_ID=$(VERACODE_API_ID)
            export VERACODE_API_KEY_SECRET=$(VERACODE_API_KEY)
            ./veracode scan --type image --source veracode scan --type image \
              --source juliantotzek/verademo:latest --output verademo.json

      # - task: PublishBuildArtifacts@1
      #   inputs:
      #     PathtoPublish: 'verademo.json'
      #     ArtifactName: 'VeracodeContainerScan'
      #     publishLocation: 'Container'

# - task: Bash@3
#   displayName: 'Policy check'
#   inputs:
#     targetType: 'inline'
#     script: |
#       PASS=$(jq -r '."policy-passed"' verademo.json)
#       echo "Passed policy: $PASS"
#       if $PASS; then
#         exit 0
#       else
#         exit 1
#       fi


- stage: Deploy
  # condition: "false"
  displayName: Deploy container
  jobs:
  - job: Deploy
    condition: "false"
    steps:
    - task: Bash@3
      displayName: Run container
      inputs:
        targetType: inline
        script: |
          docker run --rm -it -p 127.0.0.1:8080:8080 --entrypoint bash -v "$(pwd)/app:/app" verademo

- stage: Test_Deploy
  displaName: DAST Scan
  jobs:
  - job: DAST
    condition: "false"
    steps:
    - task: Bash@3
      displayName: Run DAST scan
      inputs:
        targetType: inline
        script: |
          http --auth-type=veracode_hmac POST "https://api.veracode.com/was/configservice/v1/analyses" < input.json



